#+title: useReducer

** Use Case
+ Use useReducer when you want to separate the state logic from the components
  that make the state changes
** Example
#+begin_src tsx
import { useReducer } from "react";

type ActionType = "INCREMENT" | "DECREMENT";
type Action = { type: ActionType; step: number };
const countReducer = (state: { count: number }, action: Action) => {
  switch (action.type) {
    case "INCREMENT":
      return { count: state.count + action.step };
    case "DECREMENT":
      return { count: state.count - action.step };
    default:
      throw new Error(`Unsupported action type: ${action.type}`);
  }
};

function Counter({ initialCount = 0, step = 1 }) {
  const [state, dispatch] = useReducer(countReducer, {
    count: initialCount,
  });
  const { count } = state;
  const increment = () => dispatch({ type: "INCREMENT", step });
  return <button onClick={increment}>{count}</button>;
}

function App() {
  return <Counter />;
}

export default App;
#+end_src
** Lazy initialization
#+begin_src tsx
function init(initialStateFromProps) {
  return {
    pokemon: null,
    loading: false,
    error: null,
  }
};

// ...

const [state, dispatch] = useReducer(reducer, initialState, init);
#+end_src
So, if you pass a third function argument to useReducer, it passes the second
argument to that function and uses the return value for the initial state.

*** Use Case
+ This could be useful if our init function read into localStorage or something
  else that we wouldn't want happening every re-render.
